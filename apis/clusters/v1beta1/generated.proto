/*

Copyright 2024 Simon Malpel.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package kubeception.io.apis.clusters.v1beta1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/SimonRTC/kubeception/apis/clusters/v1beta1";

message Cluster {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired behavior of a cluster.
  // +optional
  optional ClusterSpec spec = 2;

  // Current status of a cluster.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional ClusterStatus status = 3;
}

// ClusterCondition describes current state of a cluster.
message ClusterCondition {
  // Type of cluster condition, Complete or Failed.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition was checked.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastProbeTime = 3;

  // Last time the condition transit from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // (brief) reason for the condition's last transition.
  // +optional
  optional string reason = 5;

  // Human readable message indicating details about last transition.
  // +optional
  optional string message = 6;
}

message ClusterList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of clusters.
  repeated Cluster items = 2;
}

message ClusterSpec {
  // Version of the cluster.
  // +optional
  optional string version = 1;
}

// ClusterStatus represents the current state of a cluster.
message ClusterStatus {
  // The latest available observations of an object's current state. When a Cluster
  // fails, one of the conditions will have type "Failed" and status true. When
  // a Cluster is suspended, one of the conditions will have type "Suspended" and
  // status true; when the Cluster is resumed, the status of this condition will
  // become false.
  //
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  // +listType=atomic
  repeated ClusterCondition conditions = 1;
}

message HelmConsumerTemplate {
}

message HelmControlPlaneTemplate {
  // The address/hostname on which to advertise the kube-apiserver of the consumer cluster (must be accessible from both management and consumer cluster)
  optional string advertise = 1;

  // Open ID Connect (Single Sign-On)
  // +optional
  optional OpenID oidc = 2;
}

message HelmTemplate {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Containers image registry (must be accessible from both management and consumer cluster)
  // +optional
  optional string registry = 2;

  // Kubernetes control plane template (kube-apiserver, kube-controller-manager, ...)
  // +optional
  optional HelmControlPlaneTemplate controlPlan = 3;

  // Kubernetes consumer cluster template (coredns, cni, csi, ...)
  // +optional
  optional HelmConsumerTemplate consumer = 4;
}

message OpenID {
  // The URL of the OpenID issuer, only HTTPS scheme will be accepted. If set, it will be used to verify the OIDC JSON Web Token (JWT).
  optional string issuer = 1;

  // Comma-separated list of allowed JOSE asymmetric signing algorithms. JWTs with a supported 'alg' header values are: RS256, RS384, RS512, ES256, ES384, ES512, PS256, PS384, PS512. Values are defined by RFC 7518 https://tools.ietf.org/html/rfc7518#section-3.1.
  optional string algs = 2;

  // Name of the secret projected inside of the management cluster (automatically created when OpenID is configured)
  optional string secretName = 3;

  // The OpenID claim to use as the user name. Note that claims other than the default ('sub') is not guaranteed to be unique and immutable.
  optional OpenIDPrefix username = 4;

  // If provided, the name of a custom OpenID Connect claim for specifying user groups.
  optional OpenIDPrefix groups = 5;
}

message OpenIDPrefix {
  // The OpenID claim to use
  optional string name = 1;

  // Prefix is use to avoid collision with existing internal role bindings (group `example` become `oidc:example`).
  optional string prefix = 2;
}

