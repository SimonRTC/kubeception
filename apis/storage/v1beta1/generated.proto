/*

Copyright 2024 Simon Malpel.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package kubeception.io.apis.storage.v1beta1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/SimonRTC/kubeception/apis/storage/v1beta1";

message StorageBackend {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired behavior of a StorageBackend.
  // +optional
  optional StorageBackendSpec spec = 2;

  // Current status of a StorageBackend.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional StorageBackendStatus status = 3;
}

message StorageBackendCertificates {
  // Certificate Authority used to secure etcd communication.
  optional string ca = 1;

  // Certification file used to secure etcd communication.
  optional string cert = 2;

  // Private key used to secure etcd communication.
  optional string key = 3;
}

// StorageBackendCondition describes current state of a backend.
message StorageBackendCondition {
  // Type of backend condition, Complete or Failed.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition was checked.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastProbeTime = 3;

  // Last time the condition transit from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // (brief) reason for the condition's last transition.
  // +optional
  optional string reason = 5;

  // Human readable message indicating details about last transition.
  // +optional
  optional string message = 6;
}

message StorageBackendList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of StorageBackend.
  repeated StorageBackend items = 2;
}

message StorageBackendSpec {
  // Certificates used to secure etcd communication.
  // +optional
  repeated string endpoints = 1;

  // Certificates used to secure etcd communication.
  // +optional
  optional StorageBackendCertificates certificates = 2;
}

// StorageBackendStatus represents the current state of a storage backend.
message StorageBackendStatus {
  // The latest available observations of an object's current state. When a StorageBackend
  // fails, one of the conditions will have type "Failed" and status true. When
  // a StorageBackend is unhealthy, one of the conditions will have type "Healthy" and
  // status false; when the StorageBackend is resumed, the status of this condition will
  // become false.
  //
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  // +listType=atomic
  repeated StorageBackendCondition conditions = 1;
}

