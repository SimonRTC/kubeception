/*

Copyright 2024 Simon Malpel.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package kubeception.io.apis.storage.v1beta1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/SimonRTC/kubeception/apis/storage/v1beta1";

message StorageBackend {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired behavior of a StorageBackend.
  // +optional
  optional StorageBackendSpec spec = 2;
}

message StorageBackendCertificates {
  // Certificate Authority used to secure etcd communication.
  optional string ca = 1;

  // Certification file used to secure etcd communication.
  optional string cert = 2;

  // Private key used to secure etcd communication.
  optional string key = 3;
}

message StorageBackendList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of StorageBackend.
  repeated StorageBackend items = 2;
}

message StorageBackendSpec {
  // Certificates used to secure etcd communication.
  // +optional
  repeated string endpoints = 1;

  // Certificates used to secure etcd communication.
  // +optional
  optional StorageBackendCertificates certificates = 2;
}

