/*

Copyright 2024 Simon Malpel.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1beta1 "github.com/SimonRTC/kubeception/apis/storage/v1beta1"
	storagev1beta1 "github.com/SimonRTC/kubeception/pkg/generated/applyconfiguration/storage/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeStorageBackends implements StorageBackendInterface
type FakeStorageBackends struct {
	Fake *FakeStorageV1beta1
	ns   string
}

var storagebackendsResource = v1beta1.SchemeGroupVersion.WithResource("storagebackends")

var storagebackendsKind = v1beta1.SchemeGroupVersion.WithKind("StorageBackend")

// Get takes name of the storageBackend, and returns the corresponding storageBackend object, and an error if there is any.
func (c *FakeStorageBackends) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.StorageBackend, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(storagebackendsResource, c.ns, name), &v1beta1.StorageBackend{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.StorageBackend), err
}

// List takes label and field selectors, and returns the list of StorageBackends that match those selectors.
func (c *FakeStorageBackends) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.StorageBackendList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(storagebackendsResource, storagebackendsKind, c.ns, opts), &v1beta1.StorageBackendList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.StorageBackendList{ListMeta: obj.(*v1beta1.StorageBackendList).ListMeta}
	for _, item := range obj.(*v1beta1.StorageBackendList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested storageBackends.
func (c *FakeStorageBackends) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(storagebackendsResource, c.ns, opts))

}

// Create takes the representation of a storageBackend and creates it.  Returns the server's representation of the storageBackend, and an error, if there is any.
func (c *FakeStorageBackends) Create(ctx context.Context, storageBackend *v1beta1.StorageBackend, opts v1.CreateOptions) (result *v1beta1.StorageBackend, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(storagebackendsResource, c.ns, storageBackend), &v1beta1.StorageBackend{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.StorageBackend), err
}

// Update takes the representation of a storageBackend and updates it. Returns the server's representation of the storageBackend, and an error, if there is any.
func (c *FakeStorageBackends) Update(ctx context.Context, storageBackend *v1beta1.StorageBackend, opts v1.UpdateOptions) (result *v1beta1.StorageBackend, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(storagebackendsResource, c.ns, storageBackend), &v1beta1.StorageBackend{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.StorageBackend), err
}

// Delete takes name of the storageBackend and deletes it. Returns an error if one occurs.
func (c *FakeStorageBackends) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(storagebackendsResource, c.ns, name, opts), &v1beta1.StorageBackend{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeStorageBackends) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(storagebackendsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.StorageBackendList{})
	return err
}

// Patch applies the patch and returns the patched storageBackend.
func (c *FakeStorageBackends) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.StorageBackend, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(storagebackendsResource, c.ns, name, pt, data, subresources...), &v1beta1.StorageBackend{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.StorageBackend), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied storageBackend.
func (c *FakeStorageBackends) Apply(ctx context.Context, storageBackend *storagev1beta1.StorageBackendApplyConfiguration, opts v1.ApplyOptions) (result *v1beta1.StorageBackend, err error) {
	if storageBackend == nil {
		return nil, fmt.Errorf("storageBackend provided to Apply must not be nil")
	}
	data, err := json.Marshal(storageBackend)
	if err != nil {
		return nil, err
	}
	name := storageBackend.Name
	if name == nil {
		return nil, fmt.Errorf("storageBackend.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(storagebackendsResource, c.ns, *name, types.ApplyPatchType, data), &v1beta1.StorageBackend{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.StorageBackend), err
}
